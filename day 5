ARRAY:
collection of similar data in a  continuous allocation.
In C and C++ we have pointers to store the data, definitely element will be stored in continuous format.
In Java, we don't have pointers then there is a chance of elements might be stored in random places.s

SYNTAX :
datatype[arr name]
--------------------------------------------------------------------------------------------------------------------------------------------------------------
PRIMITIVE AND NON-PRIMITIVE DATA TYPES :
Primitive data types cannot be splitted or divided, whereas non-primitive data types can be divided.
primitive -- int , float , double ..etc
non-primitive -- string, array and all the objects are created by  the user.

class node{
int data;
node next;
}

All the objects stored in heap memory.
All the references stored in stack memory.

Stack memory have less space than heap memory.
All the variables stored in same data type.

------------------------------------------------------------------------------------------------------------------------------------------------------------

public class Main
{
	public static void main(String[] args) {
	    datatype[] array name;
	    int a = 10;
	    int b = 12;
	    int c = 14;
	    int d = 16;
	    
	    
	    int[] arr = {10,12,14,16}
	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

Instead of creating multiple variables , create an array.
If we create multiple variables to get the data and simply we can print variable, whereas in array , If we want to print the data we can print using index values and by default index value will starts from zero.

class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        int arr[]// initialization
        arr = {1,2,3,4,5};//declaration
        }
}

Here Declaration and Initialization will happen in same time.

------------------------------------------------------------------------------------------------------------------------------------------------------------

class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        for(int i = 0; i<arr.length;i++){
             System.out.print(arr[i]);
        }
        }
}

To get the length of the array , we have a method called --- array_name.length and
TO get the length of the string ,  we have a method called string_name.length().

Snake case --> array_name;
camelCase --> arrayName;

In Java we prefer to use camelCase to write production level code.
while creating method -- > 

void additionOfTwoNumbers(){

------------------------------------------------------------------------------------------------------------------------------------------------------------
TYPE OF PRINTING FORMATS:

****class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        for(int i = 0; i<arr.length`;i++){
             System.out.print(arr[i] + " ");
        }
        }
}

We can print the array using simple (for loop).

****for(int i : arr){
    System.out.print(i + " ");
}

We can print the array using (for each loop).

In (for each loop) , we don't need index values.


****import java.util.;
class Main {
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,5};
        System.out.print(Arrays.toString(arr));
        }
}

toString() is an inbuilt method to print array.
It can accept only one argument and that to array. --> System.out.print(Arrays.toString(arr + " ")) -- it cannot print more than on argument.
------------------------------------------------------------------------------------------------------------------------------------------------

Declaring the size of an array and initializing the values later : 

Array having fixed size , If we declare an array size it cannot be changed.
Before "=" array reference was created, with the help of "new" keyword actual object will be created in the heap memory,
For that particular data type and size.

int[] arr = new int[5]

If the array type is "int"  all the default values are zero.
If it is a string all the default values are NULL, and NULL is a literal.


import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.println("Enter the values:- ");
        int[] arr = new int[5];
        System.out.println("Enter the values:- ");
        for(int i = 0; i<arr.length;i++){
            System.out.println("Enter the values:- ");
            arr[i] = in.nextInt();
        }
        for(int i = 0; i<arr.length;i++){
            System.out.print(arr[i]);
        }
        for(int i : arr){
            System.out.println(i);
        }
        System.out.print(Arrays.toString(arr));
        }
}

Whenever trying to assign or trying to get "nth" value of array or index , we will get an exception called arrayOutOfBound.

------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int[] arr = {1,2,3,4,5};
        int heightValue  = arr[0];
        int secondHeightValue = arr[0];
        
        for(int i = 1; i< arr.length; i++){
            if(arr[i] > heightValue){
                heightValue = arr[i];
            }
        }
        for(int i = 1; i< arr.length; i++){
            if(arr[i] > secondHeightValue && secondHeightValue != heightValue){
                secondHeightValue = arr[i];
            }
        }
        System.out.println(secondHeightValue);
            }
        }


import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int[] arr = {1,2,3,4,4};
        int heightValue  = arr[0];
        int secondHeightValue = arr[0];
        
        for(int i = 1; i< arr.length; i++){
            if(arr[i] > heightValue){
                secondHeightValue = heightValue;
                heightValue = arr[i];
            }else if(arr[i] > secondHeightValue){
                secondHeightValue = arr[i];
            }
        }
        System.out.println(secondHeightValue);
            }
        }
